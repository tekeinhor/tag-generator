name: checks
on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: type of semantic-release
        options: 
          - prerelease
          - release
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main
    paths-ignore:
      - "iac/terraform/**"
      # - ".github/workflows/**"
  
env:
  python_version: "3.11.7"
  semantic_release_version: "8.7.0"
jobs:
  checks:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged != true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      # https://joht.github.io/johtizen/build/2022/01/20/github-actions-push-into-repository.html#git-commit-within-a-pull-request
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # it is not possible to use `poetry shell`in an non-interactive env (https://github.com/orgs/python-poetry/discussions/3526)
      - name: Install dependencies
        run: |
          echo ${{ github.head_ref }}
          python -m pip install --upgrade pip
          pip install poetry=="1.7.1"
          poetry install -vvv --no-cache
          source $(poetry env info --path)/bin/activate
      - name: Lint in libs/tools
        run: |
          source $(poetry env info --path)/bin/activate
          poetry run lint
      - name: Running tests with
        run: |
          source $(poetry env info --path)/bin/activate
          pytest
      - name: Create report and badge
        run: |
          source $(poetry env info --path)/bin/activate
          coverage run -m pytest
          coverage xml
          pip install genbadge"[all]"
          COVERAGE_SVG=reports/coverage.svg
          genbadge coverage -i coverage.xml  -o $COVERAGE_SVG
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add $COVERAGE_SVG
          git diff --quiet $COVERAGE_SVG && git diff --staged --quiet $COVERAGE_SVG || git commit -m "ci(badge): add/update test-cov badge"
          echo ${{ github.head_ref }}
          git show-ref
          git push
      - run: echo "üçè This job's status is ${{ job.status }}."
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}
      - name: Install semantic-release and run it
        run: |
          pwd
          echo "${{inputs.options}}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          python -m pip install --upgrade pip
          pip install python-semantic-release==${{ env.semantic_release_version }}
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          if [ ${{inputs.options}} == 'release' ]; then
            echo "RELEASE"
            semantic-release version
          else
            echo "PRE-RELEASE"
            semantic-release version --prerelease
          fi